/*
 * Shovon Hossain
 * Homework 6 
 * 11/16/14
 * 
 * The purpose of this program is to simulate the
 * line at a bank. The simulation consists of 5 tellers which help the
 * customers, and a queue that represents the line. The simulation can be
 * run as many times as the user wants. The program consists of two helper
 * classes, the Customer class and the Teller class. the customer class is
 * used to create customer object. It consists of a constructor with two
 * parameters. The first parameter, timeNeeded, represents the amount of
 * time each customer needs to spend with a teller. It is generated randomly
 * using the randomStayTime method. The second parameter, timeHelpRecieved,
 * represents the time at which the customer arrived at a teller. Both of
 * these parameters is used in the isDone method. The isDone method adds
 * timeHelpRecieved and timeNeeded and compares it to the time variable.If
 * they are equal the customer is done and true is returned, else false is
 * returned. The Teller class is used to create teller objects. It consists
 * of two variables, the availability variable is a boolean which is set to
 * true if the teller does not have a customer else false is returned. The
 * customer variable contains the customer object that the teller is tending
 * to. This class also contains a method called isFree. The isFree method
 * checks if the teller is free using its availability variable. If its free
 * it will return true, else false is returned. The Customer and Teller
 * classes are used in the simulation method. The simulation simulates the
 * bank line. It consists of 3 int variables: totalCustomers,
 * totalCustomersHelped, totalTimeOccupied. The totalCustomers variable
 * starts at 5 because the simulation starts with 5 customers already
 * occupying the 5 tellers, the rest are set to 0. The method consists of a
 * queue with type Customer. It acts as the line the customers wait in
 * before getting to see the teller. This method creates 5 tellers in an
 * array and creates 5 customers to occupy those tellers. Then it runs
 * through a while loop which executes 120 times, each iteration represents
 * one second in the bank. In the loop a random number between 1 - 10 is
 * first generated using the randomArrival method. If the number is between
 * 2 and 6 a new customer object is created and placed in the queue. Each
 * customers stay time is generated by the randomStayTimeMethod. For each
 * customer created the totalCustomers variables is incremented by 1. Next a
 * for loop used is to check if any of the customers at a teller is done or
 * not. If they are the tellers availability is set to free and the
 * totalCustomers helped variable is incremented by 1 and the totalOccupied
 * time is incremented by the customers timeNeeded value. Next another for
 * loop checks for free tellers and checks weather the queue is empty or
 * not. If the queue isnt empty and a teller is available, the poll method
 * is used on the queue and the returned customer object is set as that
 * tellers customer parameter and that tellers availability is set to false.
 * At the end of the while loop time is incremented by 1 to represent one
 * second has passed. At the end of the method totalCustomers and
 * totalCustomersHelped is printed as wells as totalCustomers -
 * totalCustomersHelped which shows customers not helped and totalTime/5
 * which represents the average time each teller spent with a customer.
 * After the simulation method is complete, the replay method is called. The
 * replay method is used at the end of the simulation. It asks if the user
 * wants to re run the simulation and to enter either y or n for yes or no.
 * If y is entered the simulation is ran again, else the program terminates.
 * The program consists of two other helper methods randomArrivalTime and
 * randomTimeNeeded. The randomArrival method generates a number between 1
 * and 10 and the randomArrival method generates a number between 2 and 5.
 */

import java.lang.reflect.Array;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class Bank {
	public static int secondsToRun = 120;
	public static int time = 0;
	public static Bank b = new Bank();

	/*
	 * The customer class is used to create customer object. It consists of a
	 * constructor with two parameters. The first parameter, timeNeeded,
	 * represents the amount of time each customer needs to spend with a teller.
	 * It is generated randomly using the randomStayTime method. The second
	 * parameter, timeHelpRecieved, represents the time at which the customer
	 * arrived at a teller. Both of these parameters is used in the isDone
	 * method which is a part of this class.
	 */
	class Customer {
		int timeNeeded, timeHelpRecieved;

		public Customer(int timeNeeded, int timeHelpRecieved) {

			this.timeNeeded = timeNeeded;
			this.timeHelpRecieved = timeHelpRecieved;

		}

		/*
		 * The isDone method adds timeHelpRecieved and timeNeeded and compares
		 * it to the time variable.If they are equal the customer is done and
		 * true is returned, else false is returned.
		 */
		public boolean isDone() {
			if ((timeHelpRecieved + timeNeeded) == time) {
				return true;
			}
			return false;
		}

		public int getTimeNeeded() {
			return timeNeeded;
		}

		public void setTimeNeeded(int timeNeeded) {
			this.timeNeeded = timeNeeded;
		}

		public int getTimeHelpRecieved() {
			return timeHelpRecieved;
		}

		public void setTimeHelpRecieved(int timeHelpRecieved) {
			this.timeHelpRecieved = timeHelpRecieved;
		}
	}

	/*
	 * The Teller class is used to create teller objects. It consists of two
	 * variables, the availability variable is a boolean which is set to true if
	 * the teller does not have a customer else false is returned. The customer
	 * variable contains the customer object that the teller is tending to. This
	 * class also contains a method called isFree.
	 */
	class Teller {
		boolean avalability;
		Customer customer;

		public Teller(boolean avalability, Customer customer) {
			this.avalability = avalability;
			this.customer = customer;
		}

		public void setCustomer(Customer customer) {
			this.customer = customer;
		}

		public boolean isAvalible() {
			return avalability;
		}

		public void setAvalability(boolean avalability) {
			this.avalability = avalability;
		}

		public Customer getCustomer() {
			return customer;
		}

		/*
		 * The isFree method checks if the teller is free using its availability
		 * variable. If its free it will return true, else false is returned
		 */
		public boolean isFree() {
			if (avalability != false) {
				return true;
			}
			return false;
		}
	}

	public static void main(String[] args) {
		simulation();
	}

	/*
	 * The replay method is used at the end of the simulation. It asks if the
	 * user wants to re run the simulation and to enter either y or n for yes or
	 * no. If y is entered the simulation is ran again, else the program
	 * terminates.
	 */
	public static void replay() {
		Scanner UI = new Scanner(System.in);
		System.out.println("\nRedo simulation?\nEnter y for yes or n for no: ");
		String input = UI.next();
		if (input.equals("y")) {
			time = 0;
			simulation();
		} else {
			System.out.println("Simulation termeinated.");
			System.exit(0);
		}
	}

	/*
	 * The simulation simulates the bank line. It consists of 3 int variables:
	 * totalCustomers, totalCustomersHelped, totalTimeOccupied. The
	 * totalCustomers variable starts at 5 because the simulation starts with 5
	 * customers already occupying the 5 tellers, the rest are set to 0. The
	 * method consists of a queue with type Customer. It acts as the line the
	 * customers wait in before getting to see the teller. This method creates 5
	 * tellers in an array and creates 5 customers to occupy those tellers. Then
	 * it runs through a while loop which executes 120 times, each iteration
	 * represents one second in the bank. In the loop a random number between 1
	 * - 10 is first generated using the randomArrival method. If the number is
	 * between 2 and 6 a new customer object is created and placed in the queue.
	 * Each customers stay time is generated by the randomStayTimeMethod. For
	 * each customer created the totalCustomers variables is incremented by 1.
	 * Next a for loop used is to check if any of the customers at a teller is
	 * done or not. If they are the tellers availability is set to free and the
	 * totalCustomers helped variable is incremented by 1 and the totalOccupied
	 * time is incremented by the customers timeNeeded value. Next another for
	 * loop checks for free tellers and checks weather the queue is empty or
	 * not. If the queue isnt empty and a teller is available, the poll method
	 * is used on the queue and the returned customer object is set as that
	 * tellers customer parameter and that tellers availability is set to false.
	 * At the end of the while loop time is incremented by 1 to represent one
	 * second has passed. At the end of the method totalCustomers and
	 * totalCustomersHelped is printed as wells as totalCustomers -
	 * totalCustomersHelped which shows customers not helped and totalTime/5
	 * which represents the average time each teller spent with a customer.
	 */
	public static void simulation() {
		int totalCustomers = 5;
		int totalCustomersHelped = 0;
		int totalTimeOccupied = 0;

		Queue<Customer> customers = new LinkedList<Customer>();

		Teller tellers[] = new Teller[5];
		for (int i = 0; i < tellers.length; i++) {
			Customer newCustomer = b.new Customer(randomStayTime(), 0);
			Teller newTeller = b.new Teller(false, newCustomer);
			tellers[i] = newTeller;

		}

		while (time < secondsToRun) {

			int arrivalNum = randomArrival();
			if (arrivalNum >= 2 && arrivalNum <= 6) {
				Customer newCustomer = b.new Customer(randomStayTime(), 0);
				customers.offer(newCustomer);
				totalCustomers++;
			}

			for (int i = 0; i < tellers.length; i++) {
				boolean done = tellers[i].getCustomer().isDone();
				if (done) {
					totalTimeOccupied += tellers[i].getCustomer()
							.getTimeNeeded();
					totalCustomersHelped++;
					tellers[i].setAvalability(done);
				}
			}

			for (int i = 0; i < tellers.length; i++) {
				if (tellers[i].isAvalible() && !customers.isEmpty()) {
					Customer firstInLine = customers.poll();
					firstInLine.setTimeHelpRecieved(time);
					tellers[i].setCustomer(firstInLine);
					tellers[i].setAvalability(false);
				}
			}
			time++;
		}

		System.out.println("Total customers " + totalCustomers);
		System.out.println("Total customers helped " + totalCustomersHelped);
		System.out.println("Tellers were occupied an averge of "
				+ (totalTimeOccupied / 5) + " seconds each");
		System.out.println("Total customers not helped "
				+ (totalCustomers - totalCustomersHelped));
		replay();
	}

	/* The randomArrival method generates a number between 1 and 10 */
	static int randomArrival() {
		int range = (10 - 1) + 1;
		return (int) (Math.random() * range) + 1;
	}

	/* The randomArrival method generates a number between 2 and 5 */
	static int randomStayTime() {
		int range = (5 - 2) + 1;
		return (int) (Math.random() * range) + 2;
	}
}
